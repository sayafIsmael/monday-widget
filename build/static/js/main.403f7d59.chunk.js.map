{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["monday","Typography","Title","mondaySdk","App","props","handleChange","event","console","log","target","value","setState","filterBy","syncData","loading","listen","res","settings","data","context","api","variables","boardIds","state","then","boards","items","length","allData","count","map","item","push","column_values","i","field","id","text","moment","format","allItemsCount","projectionAmounts","collectionAmounts","_data","_data_","reduce","a","b","Number","name","boardData","filteredStatusCount","paymentstatusCount","this","className","style","background","overflow","Stack","spacing","direction","alignItems","justifyContent","Box","sx","minWidth","maxWidth","FormControl","fullWidth","InputLabel","Select","labelId","label","onChange","e","disabled","MenuItem","textAlign","alignSelf","CircularProgress","fontSize","parseFloat","toFixed","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2cAsBMA,GAFYC,IAAVC,MAEOC,OA2LAC,E,kDAhLb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAPRC,aAAe,SAACC,GACdC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAAEC,SAAUN,EAAMG,OAAOC,QACvC,EAAKG,YAGY,EAmBnBA,SAAW,WACT,EAAKF,SAAS,CAAEG,SAAS,IACzBf,EAAOgB,OAAO,YAAY,SAAAC,GACxB,EAAKL,SAAS,CAAEM,SAAUD,EAAIE,UAGhCnB,EAAOgB,OAAO,WAAW,SAAAC,GACvB,EAAKL,SAAS,CAAEQ,QAASH,EAAIE,OAC7BX,QAAQC,IAAIQ,EAAIE,MAChBnB,EAAOqB,IAAP,oMAWE,CAAEC,UAAW,CAAEC,SAAU,EAAKC,MAAMJ,QAAQG,YAE3CE,MAAK,SAAAR,GACJT,QAAQC,IAAI,0BAA2BQ,EAAIE,KAAKO,OAAO,GAAGC,MAAMC,QAChE,IAAMC,EAAU,GACVC,EAAQ,GAEdb,EAAIE,KAAKO,OAAO,GAAGC,MAAMI,KAAI,SAAAC,GAAI,OAAIH,EAAQI,KAAKD,EAAKE,kBACvDL,EAAQE,KAAI,SAACC,EAAMG,GACjBH,EAAKD,KAAI,SAAAK,GACS,SAAZA,EAAMC,IAAiBD,EAAME,MAAQC,MAASC,OAAO,MAAQD,IAAOH,EAAME,MAAME,OAAO,MACzFV,EAAMG,KAAKG,EAAMC,UAIvB,EAAKzB,SAAS,CAAE6B,cAAeX,EAAMF,SACrCpB,QAAQC,IAAI,iBAAkBqB,EAAMF,WAGxC5B,EAAOqB,IAAP,8LAWE,CAAEC,UAAW,CAAEC,SAAU,EAAKC,MAAMJ,QAAQG,YAE3CE,MAAK,SAAAR,GACJT,QAAQC,IAAI,0BAA2BQ,EAAIE,KAAKO,OAAO,GAAGC,MAAMC,QAChE,IAAMC,EAAU,GACVa,EAAoB,GACpBC,EAAoB,GAE1B1B,EAAIE,KAAKO,OAAO,GAAGC,MAAMI,KAAI,SAAAC,GAAI,OAAIH,EAAQI,KAAKD,EAAKE,kBACvDL,EAAQE,KAAI,SAACC,EAAMG,GACjBH,EAAKD,KAAI,SAAAK,GACS,SAAZA,EAAMC,IAAiBD,EAAME,MAAQC,MAASC,OAAO,MAAQD,IAAOH,EAAME,MAAME,OAAO,MACzFX,EAAQM,GAAGJ,KAAI,SAACa,GACc,IAAxB,EAAKpB,MAAMX,UACG,aAAZ+B,EAAMP,IAAmC,oBAAdO,EAAMN,OACnCT,EAAQM,GAAGJ,KAAI,SAACc,GACG,cAAbA,EAAOR,IAAsBQ,EAAOP,MACtCI,EAAkBT,KAAKY,EAAOP,SAGlCT,EAAQM,GAAGJ,KAAI,SAACc,GACG,cAAbA,EAAOR,IAAsBQ,EAAOP,MACtCK,EAAkBV,KAAKY,EAAOP,UAKV,IAAxB,EAAKd,MAAMX,WACbgB,EAAQM,GAAGJ,KAAI,SAACc,GACG,cAAbA,EAAOR,IAAsBQ,EAAOP,MACtCI,EAAkBT,KAAKY,EAAOP,SAGlCT,EAAQM,GAAGJ,KAAI,SAACc,GACG,cAAbA,EAAOR,IAAsBQ,EAAOP,MACtCK,EAAkBV,KAAKY,EAAOP,mBAU5C,EAAK1B,SAAS,CACZ8B,kBAAmBA,EAAkBI,QAAO,SAACC,EAAGC,GAAJ,OAAUC,OAAOF,GAAKE,OAAOD,KAAI,GAC7EL,kBAAmBA,EAAkBG,QAAO,SAACC,EAAGC,GAAJ,OAAUC,OAAOF,GAAKE,OAAOD,KAAI,GAC7EjC,SAAS,WAjHjB,EAAKS,MAAQ,CACXT,SAAS,EACTF,SAAU,EACVO,QAAS,GACTF,SAAU,GACVgC,KAAM,GACNC,UAAW,GACXC,oBAAqB,EACrBX,cAAe,EACfY,mBAAoB,EACpBX,kBAAmB,EACnBC,kBAAmB,GAfJ,E,gEA4HjBW,KAAKxC,a,+BAGG,IAAD,OACP,OAAO,yBAAKyC,UAAU,MAAMC,MAAO,CAAEC,WAAaH,KAAK9B,MAAMN,SAASuC,WAAaC,SAAU,WAM3F,kBAACC,EAAA,EAAD,CACEC,QAAS,EACTC,UAAU,SACVC,WAAW,SACXC,eAAe,SACfP,MAAO,IAGP,kBAACQ,EAAA,EAAD,CAAKC,GAAI,CAAEC,SAAU,IAAKC,SAAU,MAClC,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CAAYjC,GAAG,4BAAf,YACA,kBAACkC,EAAA,EAAD,CACEC,QAAQ,2BACRnC,GAAG,qBACH1B,MAAO2C,KAAK9B,MAAMX,SAClB4D,MAAM,WACNC,SAAU,SAACC,GAAD,OAAO,EAAKrE,aAAaqE,IACnCC,SAAUtB,KAAK9B,MAAMT,SAErB,kBAAC8D,EAAA,EAAD,CAAUlE,MAAO,GAAjB,OACA,kBAACkE,EAAA,EAAD,CAAUlE,MAAO,GAAjB,6BAMR,yBACE6C,MAAO,CACLsB,UAAW,SACXC,UAAW,SACXhB,eAAgB,SAChBL,SAAU,WAIXJ,KAAK9B,MAAMT,QAAU,kBAACiE,EAAA,EAAD,CAAkBzB,UAAU,SAAW,wBAAIC,MAAO,CAAEyB,SAAU,KAAvB,IAA+BC,WAAYjC,OAAOK,KAAK9B,MAAMmB,mBAAqBW,KAAK9B,MAAMiB,eAAkB,GAAG0C,QAAQ,U,GAlL7KC,IAAMC,WCZJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxE,MAAK,SAAAyE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7F,QAAQ6F,MAAMA,EAAMC,c","file":"static/js/main.403f7d59.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\"\n//Explore more Monday React Components here: https://style.monday.com/\n// import AttentionBox from \"monday-ui-react-core/dist/AttentionBox.js\"\nimport 'antd/dist/antd.css';\n// import { Card } from 'antd';\nimport { Typography } from 'antd';\n// import { FilterOutlined } from '@ant-design/icons'\nimport moment from \"moment\"\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport Stack from \"@mui/material/Stack\";\nimport CircularProgress from '@mui/material/CircularProgress';\n\n\nconst { Title } = Typography;\n\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n  // const [age, setAge] = React.useState('');\n\n  handleChange = (event) => {\n    console.log(event.target.value)\n    this.setState({ filterBy: event.target.value });\n    this.syncData()\n  };\n\n  constructor(props) {\n    super(props);\n\n    // Default state\n    this.state = {\n      loading: false,\n      filterBy: 2,\n      context: {},\n      settings: {},\n      name: \"\",\n      boardData: {},\n      filteredStatusCount: 0,\n      allItemsCount: 0,\n      paymentstatusCount: 0,\n      projectionAmounts: 0,\n      collectionAmounts: 0\n    };\n  }\n\n  syncData = () => {\n    this.setState({ loading: true })\n    monday.listen(\"settings\", res => {\n      this.setState({ settings: res.data });\n    });\n    // TODO: set up event listeners\n    monday.listen(\"context\", res => {\n      this.setState({ context: res.data });\n      console.log(res.data);\n      monday.api(`{\n        boards(ids: 1676895469) {\n          items{\n            name\n            column_values {\n                id\n                text\n              }\n          }\n        }\n      }`,\n        { variables: { boardIds: this.state.context.boardIds } }\n      )\n        .then(res => {\n          console.log(\"Res paymentstatusCount:\", res.data.boards[0].items.length)\n          const allData = []\n          const count = []\n\n          res.data.boards[0].items.map(item => allData.push(item.column_values))\n          allData.map((item, i) => {\n            item.map(field => {\n              if (field.id == \"date4\" && field.text && moment().format(\"M\") == moment(field.text).format(\"M\")) {\n                count.push(field.id)\n              }\n            })\n          })\n          this.setState({ allItemsCount: count.length })\n          console.log(\"count.length: \", count.length)\n\n        });\n      monday.api(`{\n        boards(ids: 1676895469) {\n          items{\n            name\n            column_values {\n              id\n              text\n            }\n          }\n        }\n      }`,\n        { variables: { boardIds: this.state.context.boardIds } }\n      )\n        .then(res => {\n          console.log(\"Res paymentstatusCount:\", res.data.boards[0].items.length)\n          const allData = []\n          const projectionAmounts = []\n          const collectionAmounts = []\n\n          res.data.boards[0].items.map(item => allData.push(item.column_values))\n          allData.map((item, i) => {\n            item.map(field => {\n              if (field.id == \"date4\" && field.text && moment().format(\"M\") == moment(field.text).format(\"M\")) {\n                allData[i].map((_data) => {\n                  if (this.state.filterBy === 2) {\n                    if (_data.id == \"status_16\" && _data.text == \"Huntington Beach\") {\n                      allData[i].map((_data_) => {\n                        if (_data_.id == \"numbers_13\" && _data_.text) {\n                          projectionAmounts.push(_data_.text)\n                        }\n                      })\n                      allData[i].map((_data_) => {\n                        if (_data_.id == \"numbers_19\" && _data_.text) {\n                          collectionAmounts.push(_data_.text)\n                        }\n                      })\n                    }\n                  }\n                  if (this.state.filterBy === 1) {\n                    allData[i].map((_data_) => {\n                      if (_data_.id == \"numbers_13\" && _data_.text) {\n                        projectionAmounts.push(_data_.text)\n                      }\n                    })\n                    allData[i].map((_data_) => {\n                      if (_data_.id == \"numbers_19\" && _data_.text) {\n                        collectionAmounts.push(_data_.text)\n                      }\n                    })\n                  }\n\n                })\n              }\n            })\n          })\n\n          this.setState({\n            projectionAmounts: projectionAmounts.reduce((a, b) => Number(a) + Number(b), 0),\n            collectionAmounts: collectionAmounts.reduce((a, b) => Number(a) + Number(b), 0),\n            loading: false\n          })\n        });\n    })\n  }\n\n  componentDidMount() {\n    this.syncData()\n  }\n\n  render() {\n    return <div className=\"App\" style={{ background: (this.state.settings.background), overflow: 'hidden' }}>\n      {/* <Card title=\"Percentage Attempting Finance\" extra={<FilterOutlined />} style={{ width: 400, marginLeft: 20 }}>\n        <Title level={2}\n          style={{ textAlign: 'center' }}\n        >{(parseFloat((this.state.filteredStatusCount / this.state.allItemsCount) * 100) || 0).toFixed(2)}%</Title>\n      </Card> */}\n      <Stack\n        spacing={0}\n        direction=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        style={{}}\n      >\n\n        <Box sx={{ minWidth: 120, maxWidth: 300}}>\n          <FormControl fullWidth>\n            <InputLabel id=\"demo-simple-select-label\">Location</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              value={this.state.filterBy}\n              label=\"Location\"\n              onChange={(e) => this.handleChange(e)}\n              disabled={this.state.loading}\n            >\n              <MenuItem value={1}>All</MenuItem>\n              <MenuItem value={2}>Huntington Beach Only</MenuItem>\n            </Select>\n          </FormControl>\n        </Box>\n      </Stack>\n\n      <div\n        style={{\n          textAlign: 'center',\n          alignSelf: 'center',\n          justifyContent: 'center',\n          overflow: 'hidden'\n        }}\n      >\n        {/* <h2>Percentage Attempting Finance</h2> */}\n        {this.state.loading ? <CircularProgress className=\"mt-2\"/> : <h2 style={{ fontSize: 75 }}>${parseFloat((Number(this.state.collectionAmounts) / this.state.allItemsCount) || 0).toFixed(1)}</h2>}\n      </div>\n\n    </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}