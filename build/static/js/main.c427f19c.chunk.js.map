{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["monday","Typography","Title","mondaySdk","App","props","state","context","settings","name","boardData","filteredStatusCount","allItemsCount","liveschangesCount","callBack","pipeline","smileStyledScheduled","sameDayLifeChanged","cancelled","numberOfitems","listen","res","setState","data","console","log","api","variables","boardIds","then","allData","finalData","boards","items","map","item","push","column_values","i","field","id","text","moment","format","length","tcr","items_by_multiple_column_values","field2","_data","reduce","a","b","Number","parseFloat","this","add","getCallbackValue","getPipelineValue","getSmileStyledScheduledValue","getSameDayLifeChangedValue","getCancelledValue","className","style","background","textAlign","alignSelf","justifyContent","fontSize","getData","toFixed","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c427f19c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\"\n//Explore more Monday React Components here: https://style.monday.com/\n// import AttentionBox from \"monday-ui-react-core/dist/AttentionBox.js\"\nimport 'antd/dist/antd.css';\n// import { Card } from 'antd';\nimport { Typography } from 'antd';\n// import { FilterOutlined } from '@ant-design/icons'\nimport moment from \"moment\"\n\nconst { Title } = Typography;\n\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Default state\n    this.state = {\n      context: {},\n      settings: {},\n      name: \"\",\n      boardData: {},\n      filteredStatusCount: 0,\n      allItemsCount: 0,\n      liveschangesCount: 0,\n      callBack: [],\n      pipeline: [],\n      smileStyledScheduled: [],\n      sameDayLifeChanged: [],\n      cancelled: [],\n      numberOfitems: []\n    };\n  }\n\n  componentDidMount() {\n    monday.listen(\"settings\", res => {\n      this.setState({ settings: res.data });\n    });\n    // TODO: set up event listeners\n    monday.listen(\"context\", res => {\n      this.setState({ context: res.data });\n      console.log(res.data);\n      monday.api(`{\n        boards(ids: 1676895469) {\n          items{\n            name\n            column_values {\n              id\n              text\n            }\n          }\n        }\n      }`,\n        { variables: { boardIds: this.state.context.boardIds } }\n      )\n        .then(res => {\n          const allData = []\n          const finalData = []\n          console.log(\"res.data: \", res.data.boards[0].items)\n          res.data.boards[0].items.map(item => allData.push(item.column_values))\n\n          allData.map((item, i) => {\n            item.map(field => {\n              if (field.id == \"date4\" && field.text && moment().format(\"M\") == moment(field.text).format(\"M\")) {\n                finalData.push(field.id)\n              }\n            })\n          })\n\n          this.setState({ allItemsCount: finalData.length })\n          console.log(\"allData.length: \", finalData.length)\n\n        });\n      monday.api(`{\n        items_by_multiple_column_values(board_id: 1676895469, column_id: \"status_8\",\n        column_values: [\"Same Day Life Changed\", \"Call Back\", \"Pipeline\", \"Cancelled\", \"Smile Style Scheduled\"]) {\n          name\n          column_values {\n            id\n            text\n          }\n        }\n      }\n      `,\n        { variables: { boardIds: this.state.context.boardIds } }\n      )\n        .then(res => {\n          const allData = []\n          const tcr = []\n\n          res.data.items_by_multiple_column_values.map(item => allData.push(item.column_values))\n          const callBack = []\n          const pipeline = []\n          const smileStyledScheduled = []\n          const sameDayLifeChanged = []\n          const cancelled = []\n          const numberOfitems = []\n\n          allData.map((item, i) => {\n            item.map(field => {\n              if (field.id == \"date9\" && field.text && moment().format(\"M\") == moment(field.text).format(\"M\")) {\n                allData[i].map(field2 => {\n                  if (field2.id == \"status_8\" && (field2.text == \"Pipeline\")) {\n                    console.log(\"Pipeline value: \", field2.id)\n                    pipeline.push(field2.id)\n                  }\n                })\n              }\n              if (field.id == \"date4\" && field.text && moment().format(\"M\") == moment(field.text).format(\"M\")) {\n                numberOfitems.push(field.text)\n\n                allData[i].map(_data => {\n                  if (_data.id == \"status_16\" && _data.text == \"Huntington Beach\") {\n                    allData[i].map(field2 => {\n\n                      if (field2.id == \"status_8\" && (field2.text == \"Call Back\")) {\n                        console.log(\"callBack: \", field2.id)\n                        callBack.push(field2.id)\n                      }\n                      if (field2.id == \"status_8\" && (field2.text == \"Smile Style Scheduled\")) {\n                        smileStyledScheduled.push(field2.id)\n                      }\n                      if (field2.id == \"status_8\" && (field2.text == \"Same Day Life Changed\")) {\n                        sameDayLifeChanged.push(field2.id)\n                      }\n                      if (field2.id == \"status_8\" && (field2.text == \"Cancelled\")) {\n                        cancelled.push(field2.id)\n                      }\n\n\n                      // if (field2.id == \"status_4\" && field2.text == \"\" || field2.text == null) {\n                      //   allData[i].map(field3 => {\n                      //     if (field3.id == \"numbers_14\" && Number(field3.text) > 1000) {\n                      //       console.log(\"field3.text > 1000: \", field3.text)\n                      //       tcr.push(1.5)\n                      //     }\n                      //     if (field3.id == \"numbers_14\") {\n                      //       console.log(\"field3.text: \", field3.text)\n\n                      //       tcr.push(1)\n                      //     }\n                      //   })\n                      // }\n                    })\n                  }\n                })\n\n              }\n            })\n          })\n\n          this.setState({ callBack, pipeline, smileStyledScheduled, sameDayLifeChanged, cancelled, numberOfitems })\n\n          const liveschangesCount = tcr.reduce((a, b) => Number(a) + Number(b), 0)\n\n          console.log(\"TCR: \", tcr)\n\n          this.setState({\n            liveschangesCount,\n          })\n\n          console.log({\n            liveschangesCount,\n          })\n        });\n    })\n\n\n  }\n\n  getCallbackValue() {\n    let res = parseFloat(this.state.callBack.length) / parseFloat(this.state.allItemsCount)\n    // console.log(\"getCallbackValue: \", this.state.callBack.length, this.state.allItemsCount)\n    let add = parseFloat(res) * .04\n    return (parseFloat(res) + parseFloat(add)) * parseFloat(this.state.callBack.length)\n  }\n\n  getPipelineValue() {\n    return (parseFloat(this.state.pipeline.length) / parseFloat(this.state.allItemsCount)) * parseFloat(this.state.pipeline.length)\n  }\n\n  getSmileStyledScheduledValue() {\n    return (parseFloat(this.state.smileStyledScheduled.length) / parseFloat(this.state.allItemsCount)) * parseFloat(this.state.smileStyledScheduled.length)\n  }\n\n  getSameDayLifeChangedValue() {\n    return parseFloat(this.state.sameDayLifeChanged.length) / parseFloat(this.state.allItemsCount) * parseFloat(this.state.sameDayLifeChanged.length)\n  }\n\n  getCancelledValue() {\n    let res = parseFloat(this.state.cancelled.length) / parseFloat(this.state.allItemsCount)\n    console.log(\"cancelledValue: \", this.state.cancelled.length)\n    let add = parseFloat(res) * .02\n    return (parseFloat(res) + parseFloat(add)) * parseFloat(this.state.cancelled.length)\n  }\n\n  getData() {\n    console.log(\"this.getCallbackValue()\", this.getCallbackValue())\n    console.log(\"this.getPipelineValue()\", this.getPipelineValue())\n    console.log(\"this.getSmileStyledScheduledValue()\", this.getSmileStyledScheduledValue())\n    console.log(\"this.getSameDayLifeChangedValue()\", this.getSameDayLifeChangedValue())\n    console.log(\"this.getCancelledValue()\", this.getCancelledValue())\n\n    return (this.getCallbackValue() - this.getPipelineValue() + this.getSmileStyledScheduledValue() + this.getSameDayLifeChangedValue() - this.getCancelledValue()) / this.state.numberOfitems.length\n  }\n\n  render() {\n    return <div className=\"App\" style={{ background: (this.state.settings.background) }}>\n      {/* <Card title=\"Percentage Attempting Finance\" extra={<FilterOutlined />} style={{ width: 400, marginLeft: 20 }}>\n        <Title level={2}\n          style={{ textAlign: 'center' }}\n        >{(parseFloat((this.state.filteredStatusCount / this.state.allItemsCount) * 100) || 0).toFixed(2)}%</Title>\n      </Card> */}\n      <div\n        style={{\n          textAlign: 'center',\n          alignSelf: 'center',\n          justifyContent: 'center'\n        }}\n      >\n        {/* <h2>Percentage Attempting Finance</h2> */}\n        <h2 style={{ fontSize: 75 }}>{((this.getData() * 100) || 0).toFixed(1)}%</h2>\n      </div>\n\n    </div>;\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}