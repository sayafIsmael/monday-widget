{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["monday","Typography","Title","mondaySdk","App","props","getMenuItem","listen","res","setState","settings","data","context","console","log","api","variables","boardIds","state","then","allData","allPeople","boards","items","map","item","push","column_values","i","field","id","text","undefined","includes","people","syncData","loading","filterBy","totalConverted","totalLead","items_by_multiple_column_values","moment","format","field3","length","handleChange","event","target","value","name","boardData","totalConvertedBlank","this","className","style","background","Stack","spacing","direction","alignItems","justifyContent","Box","sx","minWidth","maxWidth","FormControl","fullWidth","InputLabel","Select","labelId","label","onChange","e","disabled","MenuItem","key","textAlign","alignSelf","margin","type","color","fontSize","parseFloat","toFixed","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1aca27b7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\"\n//Explore more Monday React Components here: https://style.monday.com/\n// import AttentionBox from \"monday-ui-react-core/dist/AttentionBox.js\"\nimport 'antd/dist/antd.css';\n// import { Card } from 'antd';\nimport { Typography } from 'antd';\nimport moment from \"moment\"\n\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport Stack from \"@mui/material/Stack\";\nimport ReactLoading from \"react-loading\";\n\nconst { Title } = Typography;\n\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Default state\n    this.state = {\n      context: {},\n      settings: {},\n      name: \"\",\n      boardData: {},\n      loading: false,\n      totalConvertedBlank: 0,\n      totalConverted: 0,\n      filterBy: \"All\",\n      people: []\n    };\n    this.getMenuItem()\n  }\n\n  getMenuItem = () => {\n    monday.listen(\"settings\", res => {\n      this.setState({ settings: res.data });\n    });\n    // TODO: set up event listeners\n    monday.listen(\"context\", res => {\n      this.setState({ context: res.data });\n      console.log(res.data);\n      monday.api(`{\n          boards(ids: 1890240262) {\n            items {\n              name\n              column_values {\n                id\n                text\n              }\n            }\n          }\n        }`,\n        { variables: { boardIds: this.state.context.boardIds } }\n      )\n        .then(res => {\n          const allData = []\n          const allPeople = []\n\n          res.data.boards[0].items.map(item => allData.push(item.column_values))\n\n          allData.map((item, i) => {\n            item.map(field => {\n              if (field.id == \"people\" && (field.text != \"\" && field.text != \"null\" && field.text != undefined)) {\n                if (!allPeople.includes(field.text)) {\n                  allPeople.push(field.text)\n                }\n              }\n            })\n          })\n\n          console.log(\"res.data\", allPeople)\n          this.setState({\n            people: allPeople\n          })\n\n        });\n\n    })\n  }\n\n  syncData = () => {\n    this.setState({ loading: true })\n    monday.listen(\"settings\", res => {\n      this.setState({ settings: res.data });\n    });\n    // TODO: set up event listeners\n    monday.listen(\"context\", res => {\n      this.setState({ context: res.data });\n      console.log(res.data);\n      monday.api(this.state.filterBy == \"All\" ? `{\n        boards(ids: 1890240262) {\n          items {\n            name\n            column_values {\n              id\n              text\n            }\n          }\n        }\n      }` : `{\n        items_by_multiple_column_values(board_id: 1890240262, column_id: \"people\", column_values: [\"${this.state.filterBy}\"]) {\n          name\n          column_values {\n            id\n            text\n          }\n        }\n      }`,\n        { variables: { boardIds: this.state.context.boardIds } }\n      )\n        .then(res => {\n          const allData = []\n          const totalConvertedBlank = []\n          const totalConverted = []\n          const totalLead = []\n\n          if (res.data.boards) {\n            res.data.boards[0].items.map(item => allData.push(item.column_values))\n          } else {\n            res.data.items_by_multiple_column_values.map(item => allData.push(item.column_values))\n          }\n\n          allData.map((item, i) => {\n            item.map(field => {\n              if (field.id == \"date4\" && field.text && moment().format(\"M\") == moment(field.text).format(\"M\")) {\n                totalLead.push(field.text)\n                //     // console.log(\"date ok\")\n                //     // allData[i].map(field2 => {\n                //     if (field.id == \"date4\" && (field.text != null || field.text != \"\")) {\n                //         console.log(\"status null push ok\")\n                //         totalConvertedBlank.push(field.text)\n                //     }\n                //     // })\n                //     // }\n                allData[i].map(field3 => {\n                  if (field3.id == \"status\" && field3.text == \"Converted\") {\n                    console.log(\"status Convert push ok\")\n                    totalConverted.push(field3.text)\n                  }\n                })\n              }\n            })\n\n          })\n\n          // if (totalConverted.length && totalConvertedBlank.length) {\n          this.setState({\n            totalConverted: totalConverted.length || 0,\n            totalLead: totalLead.length,\n            loading: false\n            // totalConvertedBlank: totalConvertedBlank.length || 0\n          })\n          // }\n          console.log({\n            totalConverted: totalConverted.length || 0,\n            totalLead: totalLead.length\n            // totalConvertedBlank: totalConvertedBlank.length || 0\n          })\n\n\n        });\n    })\n  }\n\n  componentDidMount() {\n    this.syncData()\n  }\n\n  handleChange = (event) => {\n    console.log(event.target.value)\n    this.setState({ filterBy: event.target.value });\n    this.syncData()\n  };\n  \n  render() {\n    return <div className=\"App\" style={{ background: (this.state.settings.background) }}>\n      {/* <Card title=\"Percentage Attempting Finance\" extra={<FilterOutlined />} style={{ width: 400, marginLeft: 20 }}>\n        <Title level={2}\n          style={{ textAlign: 'center' }}\n        >{(parseFloat((this.state.smartstylesCount / this.state.allItemsCount) * 100) || 0).toFixed(2)}%</Title>\n      </Card> */}\n      <Stack\n        spacing={0}\n        direction=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        style={{}}\n      >\n\n        <Box sx={{ minWidth: 120, maxWidth: 300 }}>\n          <FormControl fullWidth>\n            <InputLabel id=\"demo-simple-select-label\">People</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              value={this.state.filterBy}\n              label={\"people\"}\n              onChange={(e) => this.handleChange(e)}\n              disabled={this.state.loading}\n            >\n              <MenuItem value={\"All\"}>All</MenuItem>\n              {this.state.people.map((item, i) => <MenuItem value={item} key={i}>{item}</MenuItem>)}\n            </Select>\n          </FormControl>\n        </Box>\n      </Stack>\n      <div\n        style={{\n          textAlign: 'center',\n          alignSelf: 'center',\n          justifyContent: 'center'\n        }}\n      >\n        {/* <h2>Percentage Attempting Finance</h2> */}\n        {this.state.loading && <div style={{ margin: \"auto\", maxWidth: 71 }}>\n          <ReactLoading type={\"bubbles\"} color=\"#0073ea\" />\n        </div>}\n        {!this.state.loading && <h2 style={{ fontSize: 75 }}>{((parseFloat(this.state.totalConverted) / parseFloat(this.state.totalLead)) * 100 || 0).toFixed(1)}%</h2>}\n      </div>\n\n    </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}